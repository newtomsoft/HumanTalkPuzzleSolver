from unittest import TestCase

from z3 import Solver, Bool, sat, Sum, Not, And, is_true


class MinesweeperSolverZ3:
    def __init__(self, grid: list[list]):
        self._grid_z3 = None
        self._grid = grid
        self.rows_number = len(grid)
        self.columns_number = len(grid[0])
        self._solver = Solver()

    def get_solution(self):
        self._grid_z3 = [[Bool(f"cell_{r}_{c}") for c in range(self.columns_number)] for r in range(self.rows_number)]
        self._add_sum_constraints()

        if self._solver.check() != sat:
            return [[]]
        model = self._solver.model()
        return [[is_true(model.evaluate(self._grid_z3[r][c])) for c in range(self.columns_number)] for r in range(self.rows_number)]

    def _add_sum_constraints(self):
        constraints = []
        for r in range(self.rows_number):
            for c in range(self.columns_number):
                if self._grid[r][c] == -1:
                    continue
                constraints.append(Not(self._grid_z3[r][c]))
                constraints.append(Sum(self._get_neighbors_values(self._grid_z3, r, c)) == self._grid[r][c])
        self._solver.add(And(constraints))

    def _get_neighbors_values(self, grid, r, c):
        neighbors_values = []
        if r > 0:
            neighbors_values.append(grid[r - 1][c])
            if c > 0:
                neighbors_values.append(grid[r - 1][c - 1])
            if c < self.columns_number - 1:
                neighbors_values.append(grid[r - 1][c + 1])
        if r < self.rows_number - 1:
            neighbors_values.append(grid[r + 1][c])
            if c > 0:
                neighbors_values.append(grid[r + 1][c - 1])
            if c < self.columns_number - 1:
                neighbors_values.append(grid[r + 1][c + 1])
        if c > 0:
            neighbors_values.append(grid[r][c - 1])
        if c < self.columns_number - 1:
            neighbors_values.append(grid[r][c + 1])
        return neighbors_values


_ = -1


# noinspection DuplicatedCode
class MinesweeperSolverTests(TestCase):
    def test_solution_basic_grid(self):
        grid = [
            [_, _, _],
            [_, 1, 1],
            [_, 1, _]
        ]
        game_solver = MinesweeperSolverZ3(grid)
        solution = game_solver.get_solution()
        expected_solution = [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 1]
        ]
        self.assertEqual(expected_solution, solution)

    def test_solution_10x10(self):
        grid = [
            [_, 1, _, _, _, _, 2, _, _, _],
            [1, 2, _, 2, _, 2, _, 1, 1, 1],
            [0, _, _, _, _, _, 1, _, _, _],
            [1, _, 1, _, 1, 1, _, _, 2, _],
            [_, _, _, _, 2, _, _, _, 4, _],
            [_, _, _, _, 4, _, _, _, _, 2],
            [2, _, 4, 4, _, _, _, 4, 4, _],
            [1, _, 3, _, _, _, _, _, _, _],
            [_, _, 3, _, 3, _, _, 1, 2, 2],
            [_, 0, _, _, _, 1, 1, _, _, 1]
        ]
        game_solver = MinesweeperSolverZ3(grid)
        solution = game_solver.get_solution()
        expected_solution = [
            [1, 0, 0, 1, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 1, 0, 1, 0, 0],
            [1, 0, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 0, 0, 0, 1, 1, 1, 0, 0, 1],
            [0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
        ]
        self.assertEqual(expected_solution, solution)

    def test_solution_50x50(self):
        grid = [
            [_, _, _, _, 3, _, 1, _, 1, _, _, 1, 1, _, _, _, _, 4, _, 3, _, _, 3, 3, _, 2, 1, _, _, _, _, _, _, 0, _, _, _, _, _, _, _, 2, _, _, 5, _, _, _, 2, 2],
            [1, 3, _, _, _, _, _, _, _, 3, 3, _, _, 1, 2, _, _, _, 2, _, _, _, _, _, 4, _, _, 2, _, _, 3, 1, _, _, _, 4, 4, _, 3, 3, 5, _, 4, _, _, _, _, 2, _, _],
            [_, _, 4, 2, _, 1, _, _, _, _, _, _, _, 0, _, _, _, _, _, _, _, 5, _, _, _, _, 1, _, 3, _, 2, _, _, 2, _, _, 2, 2, _, _, _, _, _, _, _, _, _, 2, _, 3],
            [_, _, _, _, 2, 2, 2, _, 3, 4, _, _, 1, _, _, _, 3, 1, _, _, _, 4, _, 2, _, 0, _, 2, _, 3, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, 2, _],
            [2, _, _, 3, _, _, _, 3, _, _, _, _, 0, 1, 2, _, _, _, _, 1, _, _, _, 1, 1, _, _, _, _, 2, _, _, _, _, _, 1, _, _, 1, 2, _, _, 2, _, _, 2, _, _, _, _],
            [_, _, 4, _, _, _, _, _, 5, _, 1, _, 0, _, _, 2, _, _, 1, 2, _, 4, 2, _, 1, _, 1, _, _, _, _, _, 1, _, _, _, 3, 1, 1, 2, _, 1, _, _, 3, _, 1, _, _, 2],
            [_, 4, _, _, 3, 2, 4, _, _, 3, _, _, 1, _, _, _, _, _, _, 1, _, 3, _, _, _, _, _, _, 2, _, _, 0, _, _, 3, _, _, _, _, _, _, _, _, 2, _, _, _, 2, 3, _],
            [_, 5, _, _, 3, _, _, _, _, _, _, _, 2, 2, _, _, 2, 3, 2, _, _, _, _, 3, _, 2, _, 2, _, _, 2, _, 2, _, _, _, 3, _, _, 4, _, _, 3, _, 1, _, _, 1, _, _],
            [4, _, _, 4, _, _, _, 4, 4, _, 2, _, _, _, 3, 4, 3, 4, _, _, _, 4, _, _, _, 2, _, _, _, _, 2, _, 2, 2, 3, _, _, _, _, _, 3, _, _, _, _, 1, _, 1, 2, _],
            [_, _, _, _, 1, _, 3, _, _, _, _, _, _, 2, _, _, _, _, _, 6, _, _, 2, 3, _, _, _, 1, _, _, 1, _, 4, _, _, 5, _, _, 3, _, 4, _, _, 2, 4, _, _, 1, _, _],
            [_, _, 3, _, _, 2, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, 3, _, 3, _, _, 2, _, 1, _, 2, _, _, _, _, _, _, _, 3, _, 3, _, 2, _, _, _, _, 2, _, 2],
            [2, _, _, _, _, _, _, _, 2, _, 2, 1, _, 1, _, _, 3, 0, _, _, 5, _, 3, _, _, _, 3, 1, 2, _, _, _, _, 3, _, 4, _, 4, 4, _, _, _, _, 5, _, _, 2, 1, _, _],
            [2, 3, 3, 3, 2, 4, _, _, 2, _, _, 3, 1, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, 4, _, 2, _, _, 4, _, 3, _, _, 1, _, _, _, _, _, _, _, _, _],
            [1, _, _, 3, _, _, _, _, 1, _, _, _, _, _, 2, _, _, _, 1, _, _, _, 2, _, 1, 1, 3, _, _, _, _, 3, _, 1, _, _, 3, _, _, 1, _, _, _, 4, _, 0, _, _, 2, 1],
            [_, _, _, _, _, 4, _, _, _, 3, 4, _, _, _, _, 3, 2, _, _, _, 4, 3, 2, 2, 1, _, _, _, 3, _, 3, _, _, _, 3, _, _, 3, _, _, 2, _, 4, _, _, _, _, _, _, 2],
            [_, 1, 1, _, 3, _, _, 3, _, _, _, 5, _, _, _, _, 2, _, 2, _, _, 2, _, _, _, _, _, _, 2, _, _, 1, _, _, _, _, 2, _, 2, _, 3, 4, _, _, _, 0, _, 1, _, _],
            [_, _, _, 3, 3, _, _, 3, _, _, _, 4, 2, _, 3, _, 3, _, _, 3, _, _, _, _, 2, _, _, 2, 2, _, _, _, _, 3, _, 1, 3, _, _, _, 3, _, _, 3, _, _, _, 3, _, _],
            [_, 2, _, _, _, 1, _, 1, 3, _, _, _, _, _, 1, _, 3, 2, _, 1, _, _, _, 3, _, _, _, 3, _, _, 1, _, _, _, _, _, _, _, 3, 2, _, _, _, _, _, _, 2, _, _, 2],
            [_, _, _, _, 4, _, 2, _, _, _, 3, _, 1, _, _, _, 5, _, _, 2, _, 3, _, _, 3, 4, _, _, _, _, 2, 4, _, _, 3, _, _, _, _, _, _, _, 3, 3, 2, _, 3, _, _, 2],
            [3, _, 2, _, _, _, _, _, 4, 4, _, 2, _, _, _, _, _, _, _, 3, _, 1, _, 2, _, 3, 4, _, 2, _, _, _, 6, _, _, _, 3, _, 4, _, 1, _, _, _, 2, _, 4, 4, _, _],
            [4, _, _, 2, _, _, _, _, _, _, 4, _, 3, _, _, 4, _, _, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, _, _, 4, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1],
            [_, _, _, _, _, 2, _, _, _, _, _, 2, _, _, _, _, _, 3, 3, 4, 3, _, 3, _, _, _, 5, _, _, _, _, 5, 6, _, 5, _, _, 4, _, _, _, 3, _, 4, _, _, _, 2, _, _],
            [_, _, _, 0, _, 1, _, 1, _, _, 4, 3, _, 1, _, _, 2, _, _, _, _, _, _, 6, _, _, _, _, 1, _, _, 4, _, _, _, _, _, 2, _, 3, _, _, _, _, 1, _, _, _, _, 0],
            [1, _, 1, _, _, _, 0, _, _, _, _, _, _, 3, 2, _, _, _, 2, 3, 3, 4, _, _, _, _, 4, 3, _, 1, _, _, _, _, 4, _, _, _, 1, _, _, _, 2, _, _, _, 2, _, _, _],
            [2, _, 1, _, _, _, 2, _, 2, _, 5, _, _, _, _, _, _, 1, 1, _, _, _, 2, 3, _, _, _, _, 1, _, _, _, _, 2, 1, 2, _, _, _, _, 2, _, _, _, 3, 2, _, _, 1, _],
            [_, _, 2, _, 4, _, 3, _, 2, _, _, 4, _, _, 4, 5, _, _, 2, _, 2, _, _, _, _, _, 4, _, _, 4, _, _, 1, _, _, _, 1, 1, _, _, 3, _, _, _, _, _, 3, _, _, _],
            [3, _, 3, _, _, _, _, 1, 1, _, 3, _, _, 3, _, 3, _, _, _, 2, 2, _, 2, _, 4, 3, 4, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, 2, _, 3, _, _, _, 1],
            [_, _, 2, 2, _, 3, _, _, _, 4, _, _, _, _, _, _, _, 3, _, _, _, _, 1, _, _, _, _, 3, 2, _, 2, _, _, 2, _, 1, _, 0, _, _, 3, _, 2, _, 2, _, _, _, 4, 3],
            [_, _, 1, _, _, 3, _, _, _, _, _, 3, _, 2, _, 0, _, _, _, _, _, 1, _, 2, 3, _, _, 1, _, _, _, _, _, _, _, _, 0, _, _, _, _, _, _, 2, _, 4, _, 1, _, _],
            [2, _, _, 1, _, 2, _, 3, _, 4, _, _, 3, _, 1, _, 1, 0, _, _, 1, _, _, _, _, _, 3, _, 2, _, 2, 2, 1, _, 2, _, _, _, 1, _, _, 2, _, _, _, _, _, _, _, 4],
            [_, 2, 2, _, _, _, _, _, 2, 2, _, _, _, _, 2, _, _, _, 1, _, 1, _, 2, 2, _, _, 1, _, 2, 2, _, _, _, _, _, _, 2, _, _, 1, _, _, 1, _, _, _, _, _, _, _],
            [_, _, 3, _, 3, _, 3, _, _, _, _, _, 4, _, _, _, _, _, 2, _, _, _, _, _, _, 1, _, _, _, _, 2, _, _, _, 2, 2, _, _, 0, 2, _, _, _, 2, _, _, 1, 2, _, 3],
            [_, _, _, _, _, _, 2, 1, _, 1, 2, _, _, 3, _, 2, _, _, _, 1, 1, _, _, 1, _, _, _, 0, _, _, 1, _, 2, _, 1, _, _, _, 1, 1, _, _, _, 2, 2, _, _, 1, _, _],
            [_, 3, _, _, 2, 1, 1, _, _, 1, _, 3, _, _, 1, _, 0, 1, _, _, _, 1, _, _, _, 3, _, 2, 1, _, _, _, 0, _, _, _, 2, _, _, _, 1, 1, 1, _, 2, _, _, _, 2, _],
            [_, _, _, 3, 2, _, _, 2, _, _, 3, _, 3, _, 0, 1, _, _, _, 3, _, _, 1, _, 2, _, _, 3, _, 1, _, 2, _, _, _, _, _, 2, _, _, _, 1, _, _, _, _, _, _, 2, _],
            [_, 1, _, _, _, _, _, _, 3, _, _, _, _, _, 1, _, _, _, _, _, 3, _, _, _, 3, _, _, _, _, _, _, _, _, _, 3, _, 5, _, _, _, _, _, _, _, 3, _, 1, 0, 1, _],
            [_, 2, _, _, _, 4, 5, _, _, 2, 4, _, 4, 2, _, _, _, 3, _, 4, _, _, _, 4, _, 3, _, _, 3, _, _, 4, _, 2, _, 2, _, _, _, 1, _, _, 1, _, 2, _, 0, 0, 1, _],
            [2, 3, _, 3, _, _, 3, _, _, 1, _, _, 2, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _, 2, 2, _, _, 3, 1, 2, _, _, _, 4, _, _, _, 0, _, _, _, _, _, _, 2],
            [_, _, _, _, 4, _, _, 3, _, _, 4, _, _, 3, 2, 2, _, 1, _, _, 5, _, _, _, 4, 2, _, 3, _, 1, _, _, _, _, 2, _, 4, 4, _, _, _, 0, _, _, _, _, _, 2, _, _],
            [2, _, 4, _, 4, 3, _, _, _, _, _, 4, _, _, _, _, _, 1, _, 3, _, _, 3, _, 3, _, _, _, 2, _, 1, 1, _, 3, _, _, _, _, _, _, 1, _, _, 3, _, 5, _, _, _, _],
            [_, 2, _, _, _, _, _, _, 5, 6, _, _, 2, _, _, _, 3, _, _, _, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, 3, _, _, _, 1, _, _, _, 5, _, _, 1, _],
            [_, _, 3, 3, _, _, 5, _, _, _, _, 3, _, 3, _, _, _, 3, _, _, 1, 1, _, _, _, 2, _, _, _, 2, _, _, _, _, _, 2, _, _, 2, _, _, 2, _, 3, _, 4, _, _, 0, _],
            [_, _, _, 1, _, _, 3, _, 4, _, _, _, _, 4, 4, _, _, _, _, 5, _, _, 1, _, 0, 2, _, 3, _, 1, _, _, 1, _, _, _, 1, _, _, 2, _, _, _, 4, _, _, 1, _, 2, _],
            [_, 4, _, _, _, 2, _, _, _, _, _, _, 3, _, _, _, _, 2, _, _, _, 2, _, _, _, _, 2, _, 3, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _],
            [_, 4, _, _, _, 2, _, 1, 2, _, 3, _, _, _, 2, _, 1, _, _, _, 5, _, 2, _, _, 3, _, _, 2, _, 2, _, _, _, _, _, _, 0, 2, _, _, 2, 3, _, _, 3, _, 4, 2, _],
            [2, _, 3, 3, _, _, 3, _, _, 0, 2, _, 3, 2, _, 1, _, _, _, 6, _, _, _, _, 4, _, _, _, _, _, _, _, 1, _, 2, _, _, _, 3, _, _, _, _, 4, _, _, _, _, _, _],
            [_, 3, _, _, _, _, _, _, _, 0, _, 2, _, _, _, _, _, _, _, 6, _, _, 5, _, _, _, 4, _, _, _, _, 2, _, _, 1, _, _, _, 3, _, _, 4, _, _, _, _, 2, _, _, _],
            [_, _, _, 4, 4, 3, _, _, _, _, _, _, _, _, _, 3, _, 5, _, _, _, _, _, _, _, 2, _, 4, _, _, 1, _, 2, _, 1, _, 3, _, _, 4, _, _, 2, _, _, _, _, 2, 2, _],
            [_, _, 2, _, 1, _, 2, _, 2, 1, _, _, 0, _, 2, _, _, 4, 4, 4, _, _, 5, 5, 3, 1, _, _, 4, _, 3, _, _, 2, _, _, 1, _, 1, _, 5, _, _, 2, 4, 3, _, _, _, 2],
            [0, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, 2, _, _, _, _, 2, _, _, _, _, _, 2, _, _, _, 1, _, _, _, 1, _, _, _, _, _, _, 2, _, 2, _, _, _, 2, _]
        ]
        game_solver = MinesweeperSolverZ3(grid)
        solution = game_solver.get_solution()
        expected_solution = [
            [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1],
            [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1],
            [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
            [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
            [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
            [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
            [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
            [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
            [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1],
            [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
            [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],
            [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1]
        ]
        self.assertEqual(expected_solution, solution)
